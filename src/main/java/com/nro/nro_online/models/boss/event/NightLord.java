package com.nro.nro_online.models.boss.event;

import com.nro.nro_online.consts.ConstItem;
import com.nro.nro_online.models.boss.BossData;
import com.nro.nro_online.models.boss.BossManager;
import com.nro.nro_online.models.map.ItemMap;
import com.nro.nro_online.models.player.Player;
import com.nro.nro_online.services.Service;
import com.nro.nro_online.services.func.ChangeMapService;
import com.nro.nro_online.utils.Util;

public class NightLord extends EscortedBoss {

    private static final int FIXED_DAMAGE = 46; // S√°t th∆∞∆°ng c·ªë ƒë·ªãnh
    private static final int DROP_Y_OFFSET = 100; // ƒê·ªô cao drop item
    private long lastSpecialSkillTime; // Th·ªùi gian d√πng skill ƒë·∫∑c bi·ªát

    public NightLord(byte id, BossData data, Player owner) {
        super(id, data);
        setEscort(owner);
        joinMap(); // Tham gia map ngay khi kh·ªüi t·∫°o
        lastSpecialSkillTime = System.currentTimeMillis();
    }

    @Override
    public int injured(Player plAtt, int damage, boolean piercing, boolean isMobAttack) {
        return super.injured(plAtt, FIXED_DAMAGE, piercing, isMobAttack); // Lu√¥n nh·∫≠n 46 damage
    }

    @Override
    protected boolean useSpecialSkill() {
        if (Util.canDoWithTime(lastSpecialSkillTime, 20000)) { // Cooldown 20 gi√¢y
            Service.getInstance().sendThongBao(escort, "Night Lord tƒÉng t·ªëc cho b·∫°n, ch·∫°y l·∫π l√™n! üòà");
            escort.nPoint.speed += 2; // TƒÉng t·ªëc ƒë·ªô escort
            lastSpecialSkillTime = System.currentTimeMillis();
            return true;
        }
        return false;
    }

    @Override
    public void rewards(Player pl) {
        if (this.zone == null) return; // Check null ƒë·ªÉ an to√†n
        ItemMap itemMap = new ItemMap(
                this.zone,
                ConstItem.BO_CANH_CUNG,
                1,
                this.location.x,
                this.zone.map.yPhysicInTop(this.location.x, DROP_Y_OFFSET),
                -1
        );
        Service.getInstance().dropItemMap(this.zone, itemMap);
        Service.getInstance().sendThongBao(pl, "Nh·∫≠n ƒë∆∞·ª£c B·ªô C√°nh C·ª©ng, bay cao n√†o! üòé");
    }

    @Override
    public void initTalk() {
        this.textTalkMidle = new String[]{
                "Ta l√† Night Lord, ƒë·ª´ng h√≤ng v∆∞·ª£t qua ta d·ªÖ d√†ng! üòè",
                "ƒêi theo ta n·∫øu mu·ªën s·ªëng s√≥t, nh√≥c! üòà",
                "ƒê·ª´ng ƒë·ªÉ ta ph·∫£i ƒë·ª£i l√¢u, ta kh√¥ng ki√™n nh·∫´n ƒë√¢u!"
        };
    }

    @Override
    public void idle() {
        if (escort != null && Util.getDistance(this, escort) > 30) {
            // Di chuy·ªÉn ng·∫´u nhi√™n quanh escort
            this.location.x = escort.location.x + Util.nextInt(-15, 15);
            this.location.y = escort.location.y + Util.nextInt(-10, 10);
        }
    }

    @Override
    public void checkPlayerDie(Player pl) {
        if (pl.isDie() && pl.equals(escort)) {
            Service.getInstance().sendThongBaoAllPlayer("Night Lord c∆∞·ªùi kh·∫©y: 'Ch·ªß y·∫øu th·∫ø n√†y th√¨ ta ƒëi ƒë√¢y!' üòÇ");
            leaveMap();
        }
    }

    @Override
    public void joinMap() {
        if (escort != null && escort.zone != null) {
            ChangeMapService.gI().changeMapBySpaceShip(this, escort.zone, ChangeMapService.NON_SPACE_SHIP);
        }
    }

    @Override
    public void die() {
        if (this.isDie()) return; // Tr√°nh g·ªçi die nhi·ªÅu l·∫ßn
        rewards(escort); // Drop ph·∫ßn th∆∞·ªüng tr∆∞·ªõc khi r·ªùi
        leaveMap();
    }

    @Override
    public void leaveMap() {
        super.leaveMap();
        BossManager.gI().removeBoss(this);
    }
}